#include <iostream>

using namespace std;

const int MAX_CITIES = 10;
int numberOfCities;
int distanceMatrix[MAX_CITIES][MAX_CITIES];
int currentPath[MAX_CITIES];
bool cityVisited[MAX_CITIES];
int shortestDistance = 2147483647;
int bestPathFound[MAX_CITIES];

int calculatePathTotalDistance(int path[], int pathLength) {
    int totalSum = 0;
    for (int i = 0; i < pathLength - 1; i++) {
        totalSum += distanceMatrix[path[i]][path[i+1]];
    }
    totalSum += distanceMatrix[path[pathLength-1]][path[0]];
    return totalSum;
}

void findPossiblePaths(int step) {
    if (step == numberOfCities) {
        int currentPathDistance = calculatePathTotalDistance(currentPath, numberOfCities);
        if (currentPathDistance < shortestDistance) {
            shortestDistance = currentPathDistance;
            for (int i = 0; i < numberOfCities; i++) {
                bestPathFound[i] = currentPath[i];
            }
        }
        return;
    }

    for (int cityIndex = 0; cityIndex < numberOfCities; cityIndex++) {
        if (!cityVisited[cityIndex]) {
            cityVisited[cityIndex] = true;
            currentPath[step] = cityIndex;
            findPossiblePaths(step + 1);
            cityVisited[cityIndex] = false;
        }
    }
}

int main() {
    cout << "Enter number of cities (up to " << MAX_CITIES << "): ";
    cin >> numberOfCities;

    if (numberOfCities <= 0 || numberOfCities > MAX_CITIES) {
        cout << "Invalid number of cities. Please enter a number between 1 and " << MAX_CITIES << "." << endl;
        return 1;
    }

    cout << "Enter the distance matrix (" << numberOfCities << "x" << numberOfCities << "):\n";
    for (int i = 0; i < numberOfCities; i++) {
        for (int j = 0; j < numberOfCities; j++) {
            cin >> distanceMatrix[i][j];
        }
    }

    for (int i = 0; i < numberOfCities; ++i) {
        cityVisited[i] = false;
    }

    currentPath[0] = 0;
    cityVisited[0] = true;
    findPossiblePaths(1);

    cout << "Shortest route: ";
    for (int i = 0; i < numberOfCities; i++) {
        cout << bestPathFound[i] << " ";
    }
    cout << bestPathFound[0] << endl;
    cout << "Minimum distance = " << shortestDistance << endl;

    return 0;
}




